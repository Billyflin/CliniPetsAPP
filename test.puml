@startuml
class cl.clinipets.feature.mascotas.data.MascotasRemotoDataSource {
+ Response<List<Mascota>> obtenerMisMascotas()
}

class cl.clinipets.di.RedModule {
+ ApiClient proveeApiClient()
+ MascotasApi proveeMascotasApi(ApiClient)
}

abstract class cl.clinipets.di.MascotasRepositorioModule {
+ MascotasRepositorio vinculaMascotasRepositorio(MascotasRepositorioImpl)
}

interface cl.clinipets.feature.mascotas.domain.MascotasRepositorio {
+ Resultado<List<Mascota>> obtenerMisMascotas()
}

class cl.clinipets.feature.mascotas.data.MascotasRepositorioImpl {
+ Resultado<List<Mascota>> obtenerMisMascotas()
}

class cl.clinipets.ClinipetsApplication {
+ void onCreate()
}

class cl.clinipets.feature.mascotas.presentation.MisMascotasViewModelTest$FakeMascotasRepositorio {
+ Resultado<List<Mascota>> obtenerMisMascotas()
}

class cl.clinipets.feature.mascotas.presentation.MisMascotasViewModelTest {
+  mainDispatcherRule
+ void al inicializar carga mascotas y expone exito()
+ void cuando el caso de uso falla expone error()
- Mascota crearMascota()
}


class cl.clinipets.feature.auth.domain.Sesion {
}
class cl.clinipets.feature.mascotas.presentation.MisMascotasUiState {
}
class cl.clinipets.feature.mascotas.presentation.MisMascotasViewModel {
-  _estado
+ StateFlow<MisMascotasUiState> estado
+ void recargar()
}


class cl.clinipets.MainDispatcherRule {
+ TestDispatcher testDispatcher
+ void starting(Description)
+ void finished(Description)
}


class cl.clinipets.ui.theme.ExtendedColorScheme {
}
class cl.clinipets.ui.theme.ColorFamily {
}
enum cl.clinipets.ui.theme.Contrast {
+  Standard
+  Medium
+  High
}

class cl.clinipets.feature.mascotas.domain.ObtenerMisMascotasUseCase {
+ Resultado<List<Mascota>> invoke()
}

class cl.clinipets.MainActivity {
+ void onCreate(Bundle?)
}

class cl.clinipets.feature.mascotas.data.MascotasRepositorioImplTest {
- MockWebServer servidor
- MascotasApi api
- MascotasRemotoDataSource dataSource
- MascotasRepositorioImpl repositorio
+ void setUp()
+ void tearDown()
+ void cuando el backend responde 200 devuelve Resultado_Exito con mascotas()
+ void cuando el backend responde error 404 devuelve Resultado_Error de cliente()
+ void cuando hay un error de red devuelve Resultado_Error de red()
- Mascota crearMascota()
}


class cl.clinipets.core.Resultado$Exito {
}
class cl.clinipets.core.Resultado$Error {
}
enum cl.clinipets.core.Resultado$Tipo {
+  RED
+  CLIENTE
+  SERVIDOR
+  DESCONOCIDO
}

class cl.clinipets.core.Resultado {
}


cl.clinipets.feature.mascotas.domain.MascotasRepositorio <|.. cl.clinipets.feature.mascotas.data.MascotasRepositorioImpl
android.app.Application <|-- cl.clinipets.ClinipetsApplication
cl.clinipets.feature.mascotas.presentation.MisMascotasViewModelTest +.. cl.clinipets.feature.mascotas.presentation.MisMascotasViewModelTest$FakeMascotasRepositorio
cl.clinipets.feature.mascotas.presentation.MascotasRepositorio <|.. cl.clinipets.feature.mascotas.presentation.MisMascotasViewModelTest$FakeMascotasRepositorio
androidx.lifecycle.ViewModel <|-- cl.clinipets.feature.mascotas.presentation.MisMascotasViewModel
org.junit.rules.TestWatcher <|-- cl.clinipets.MainDispatcherRule
androidx.activity.ComponentActivity <|-- cl.clinipets.MainActivity
cl.clinipets.core.Resultado +.. cl.clinipets.core.Resultado$Exito
cl.clinipets.core.Resultado <|-- cl.clinipets.core.Resultado$Exito
cl.clinipets.core.Resultado +.. cl.clinipets.core.Resultado$Error
cl.clinipets.core.Resultado <|-- cl.clinipets.core.Resultado$Error
cl.clinipets.core.Resultado +.. cl.clinipets.core.Resultado$Tipo
@enduml